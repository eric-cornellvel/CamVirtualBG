{"version":3,"sources":["demo_util.js"],"names":["getSizeFromImageLikeElement","input","offsetHeight","offsetWidth","height","width","Error","getSizeFromVideoElement","videoHeight","videoWidth","getInputSize","HTMLCanvasElement","HTMLImageElement","ImageData","HTMLVideoElement","tf","Tensor","shape","offScreenCanvases","isSafari","test","navigator","userAgent","assertSameDimensions","_a","_b","nameA","nameB","widthA","heightA","widthB","heightB","flipCanvasHorizontal","canvas","ctx","getContext","scale","translate","drawWithCompositing","image","compositOperation","globalCompositeOperation","drawImage","createOffScreenCanvas","offScreenCanvas","document","createElement","ensureOffscreenCanvasCreated","id","drawAndBlurImageOnCanvas","blurAmount","clearRect","save","cpuBlur","filter","restore","drawAndBlurImageOnOffScreenCanvas","offscreenCanvasName","renderImageToCanvas","renderImageDataToCanvas","putImageData","renderImageDataToOffScreenCanvas","canvasName","renderImageToOffScreenCanvas"],"mappings":"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","file":"demo_util.49c8ed8e.js","sourceRoot":"..","sourcesContent":["function getSizeFromImageLikeElement(input) {\n    if (input.offsetHeight !== 0 && input.offsetWidth !== 0) {\n        return [input.offsetHeight, input.offsetWidth];\n    }\n    else if (input.height != null && input.width != null) {\n        return [input.height, input.width];\n    }\n    else {\n        throw new Error(\"HTMLImageElement must have height and width attributes set.\");\n    }\n}\nfunction getSizeFromVideoElement(input) {\n    if (input.height != null && input.width != null) {\n        return [input.height, input.width];\n    }\n    else {\n        return [input.videoHeight, input.videoWidth];\n    }\n}\nexport function getInputSize(input) {\n    if ((typeof (HTMLCanvasElement) !== 'undefined' &&\n        input instanceof HTMLCanvasElement) ||\n        (typeof (HTMLImageElement) !== 'undefined' &&\n            input instanceof HTMLImageElement)) {\n        return getSizeFromImageLikeElement(input);\n    }\n    else if (typeof (ImageData) !== 'undefined' && input instanceof ImageData) {\n        return [input.height, input.width];\n    }\n    else if (typeof (HTMLVideoElement) !== 'undefined' &&\n        input instanceof HTMLVideoElement) {\n        return getSizeFromVideoElement(input);\n    }\n    else if (input instanceof tf.Tensor) {\n        return [input.shape[0], input.shape[1]];\n    }\n    else {\n        throw new Error(\"error: Unknown input type: \" + input + \".\");\n    }\n}\n\nvar offScreenCanvases = {};\nfunction isSafari() {\n    return (/^((?!chrome|android).)*safari/i.test(navigator.userAgent));\n}\nfunction assertSameDimensions(_a, _b, nameA, nameB) {\n    var widthA = _a.width, heightA = _a.height;\n    var widthB = _b.width, heightB = _b.height;\n    if (widthA !== widthB || heightA !== heightB) {\n        throw new Error(\"error: dimensions must match. \" + nameA + \" has dimensions \" + widthA + \"x\" + heightA + \", \" + nameB + \" has dimensions \" + widthB + \"x\" + heightB);\n    }\n}\nfunction flipCanvasHorizontal(canvas) {\n    var ctx = canvas.getContext('2d');\n    ctx.scale(-1, 1);\n    ctx.translate(-canvas.width, 0);\n}\nfunction drawWithCompositing(ctx, image, compositOperation) {\n    ctx.globalCompositeOperation = compositOperation;\n    ctx.drawImage(image, 0, 0);\n}\nfunction createOffScreenCanvas() {\n    var offScreenCanvas = document.createElement('canvas');\n    return offScreenCanvas;\n}\nexport function ensureOffscreenCanvasCreated(id) {\n    if (!offScreenCanvases[id]) {\n        offScreenCanvases[id] = createOffScreenCanvas();\n    }\n    return offScreenCanvases[id];\n}\nfunction drawAndBlurImageOnCanvas(image, blurAmount, canvas) {\n    var height = image.height, width = image.width;\n    var ctx = canvas.getContext('2d');\n    canvas.width = width;\n    canvas.height = height;\n    ctx.clearRect(0, 0, width, height);\n    ctx.save();\n    if (isSafari()) {\n        cpuBlur(canvas, image, blurAmount);\n    }\n    else {\n        ctx.filter = \"blur(\" + blurAmount + \"px)\";\n        ctx.drawImage(image, 0, 0, width, height);\n    }\n    ctx.restore();\n}\nexport function drawAndBlurImageOnOffScreenCanvas(image, blurAmount, offscreenCanvasName) {\n    var canvas = ensureOffscreenCanvasCreated(offscreenCanvasName);\n    if (blurAmount === 0) {\n        renderImageToCanvas(image, canvas);\n    }\n    else {\n        drawAndBlurImageOnCanvas(image, blurAmount, canvas);\n    }\n    return canvas;\n}\nfunction renderImageToCanvas(image, canvas) {\n    var width = image.width, height = image.height;\n    canvas.width = width;\n    canvas.height = height;\n    var ctx = canvas.getContext('2d');\n    ctx.drawImage(image, 0, 0, width, height);\n}\nfunction renderImageDataToCanvas(image, canvas) {\n    canvas.width = image.width;\n    canvas.height = image.height;\n    var ctx = canvas.getContext('2d');\n    ctx.putImageData(image, 0, 0);\n}\nexport function renderImageDataToOffScreenCanvas(image, canvasName) {\n    var canvas = ensureOffscreenCanvasCreated(canvasName);\n    renderImageDataToCanvas(image, canvas);\n    return canvas;\n}\nexport function renderImageToOffScreenCanvas(image, canvasName) {\n    var canvas = ensureOffscreenCanvasCreated(canvasName);\n    renderImageToCanvas(image, canvas);\n    return canvas;\n}\nexport function drawWithCompositing(ctx, image, compositOperation) {\n    ctx.globalCompositeOperation = compositOperation;\n    ctx.drawImage(image, 0, 0);\n}\n\n\n"]}